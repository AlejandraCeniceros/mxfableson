{"version":3,"sources":["componentes/ComboBox.jsx","componentes/BarChart.jsx","componentes/ChooseGrafica.jsx","pages/NetForestCoverChange.jsx","App.js","serviceWorker.js","index.js"],"names":["ComboBox","props","onChange","className","name","value","BarChart","options","responsive","text","scales","xAxes","stacked","ticks","display","gridLines","drawBorder","yAxes","data","ChooseGrafica","efe","labels","datasets","label","backgroundColor","select","GraficaType","Iteration","Scenario","grafica","NetForestCoverChange","state","handleChange","e","setState","target","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.87a3df0a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nfunction ComboBox (props) {\r\n\r\n    \r\n        const{onChange}=props\r\n        return (\r\n          \r\n            <div className=\"contenedor-selects\">\r\n                <select  name=\"Scenario\" onChange={onChange}>\r\n                    <option value=\"Sustainaible\">Sustainaible</option>\r\n                    <option value=\"Current_trend\">Current trend</option>\r\n                    \r\n                </select>\r\n                \r\n                <select  name=\"Iteration\" onChange={onChange}>\r\n                    <option value=\"iteration_4\">iteration:4</option>\r\n                    <option value=\"iteration_3\">iteration:3</option>\r\n                </select>\r\n\r\n                 <select  name=\"GraficaType\" onChange={onChange}>\r\n                    <option value=\"group\">Group</option>\r\n                    <option value=\"regions\">ALL ROW regions</option>\r\n                    <option value=\"countries\">ALL FABLE countries</option>\r\n                </select>\r\n    \r\n            </div>\r\n\r\n        )\r\n    \r\n}\r\nexport default ComboBox;\r\n\r\n","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\n\r\n\r\n\r\n\r\nconst  BarChart=(props)=> {\r\n\r\n\r\n\r\n    return (\r\n        <div >\r\n\r\n            <Bar options={{\r\n                responsive: true,\r\n                text: 'Population growth (millions): Europe & Africa',\r\n                scales: {\r\n                    xAxes: [{\r\n                        stacked: true,\r\n                        ticks: { display: true },\r\n                        gridLines: {\r\n                            display: false,\r\n                            drawBorder: false\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        stacked: true // this also..\r\n                    }]\r\n\r\n                }\r\n\r\n            }} data={props.data}\r\n\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default BarChart;","import React from 'react';\r\nimport BarChart from './BarChart'\r\n\r\n\r\n\r\n\r\n\r\n\r\n const ChooseGrafica=(props)=> {\r\n   \r\n    const efe = {\r\n\r\n        labels: [\"2000\", \"2005\", \"2010\", \"2015\", \"2020\", \"2025\", \"2030\", \"2035\", \"2040\", \"2045\", \"2050\"],\r\n        datasets: [\r\n            {\r\n                label: \"1\",\r\n                backgroundColor: \"#307a33\",\r\n                data: [368026.27, 368026.27, 368026.27, 385782.29, 5, 9, 7, 6, 2, 6]\r\n\r\n\r\n            },\r\n            {\r\n                label: \"2\",\r\n                backgroundColor: \"#81c784\",\r\n                data: [540342.81, 540342.81, 540342.81, 540342.81, 5, 9, 7, 6, 2, 6]\r\n            },\r\n            {\r\n                label: \"3\",\r\n                backgroundColor: \"#ffd54f\",\r\n                data: [859805.55, 859805.55, 859805.55, 859805.55, 887919, 46]\r\n\r\n            }\r\n        ]\r\n\r\n    }\r\n\r\n\r\n    if (props.data.select.GraficaType === \"group\" && props.data.select.Iteration === \"iteration_4\" && props.data.select.Scenario === \"Sustainaible\") {\r\n        return <props.grafica data={efe} />\r\n    } else if (props.data.select.GraficaType === \"group\" && props.data.select.Iteration === \"iteration_3\" && props.data.select.Scenario === \"Sustainaible\") {\r\n        return <props.grafica data={efe} />\r\n    } else if (props.data.select.GraficaType === \"group\" && props.data.select.Iteration === \"iteration_4\" && props.data.select.Scenario === \"Current_trend\") {\r\n        return <props.grafica data={efe} />\r\n    } else if (props.data.select.GraficaType === \"group\" && props.data.select.Iteration === \"iteration_3\" && props.data.select.Scenario === \"Current_trend\") {\r\n        return <props.grafica data={efe} />\r\n    } else if (props.data.select.GraficaType === \"regions\" && props.data.select.Iteration === \"iteration_4\" && props.data.select.Scenario === \"Sustainaible\") {\r\n        return <props.grafica data={efe} />\r\n    } else if (props.data.select.GraficaType === \"regions\" && props.data.select.Iteration === \"iteration_3\" && props.data.select.Scenario === \"Sustainaible\") {\r\n        return <h1>regions iteration_3    Sustainaible</h1>\r\n    } else if (props.data.select.GraficaType === \"regions\" && props.data.select.Iteration === \"iteration_4\" && props.data.select.Scenario === \"Current_trend\") {\r\n        return <h1>regions iteration_4    Current_trend</h1>\r\n    } else if (props.data.select.GraficaType === \"regions\" && props.data.select.Iteration === \"iteration_3\" && props.data.select.Scenario === \"Current_trend\") {\r\n        return <h1>regions iteration_3    Current_trend</h1>\r\n    } else if (props.data.select.GraficaType === \"countries\" && props.data.select.Iteration === \"iteration_4\" && props.data.select.Scenario === \"Sustainaible\") {\r\n        return <h1>countries iteration_4    Sustainaible</h1>\r\n    }else if (props.data.select.GraficaType === \"countries\" && props.data.select.Iteration === \"iteration_3\" && props.data.select.Scenario === \"Sustainaible\") {\r\n        return <h1>countries iteration_3    Sustainaible</h1>\r\n    } else if (props.data.select.GraficaType === \"countries\" && props.data.select.Iteration === \"iteration_4\" && props.data.select.Scenario === \"Current_trend\") {\r\n        return <h1>countries iteration_4    Current_trend</h1>\r\n    } else if (props.data.select.GraficaType === \"countries\" && props.data.select.Iteration === \"iteration_3\" && props.data.select.Scenario === \"Current_trend\") {\r\n        return <h1>countries iteration_3    Current_trend</h1>\r\n    }\r\n    return null\r\n}\r\nexport default ChooseGrafica;","import React, { Component } from 'react';\r\n\r\n\r\nimport ComboBox from '../componentes/ComboBox'\r\n\r\nimport ChooseGrafica from '../componentes/ChooseGrafica'\r\nimport BarChart from '../componentes/BarChart'\r\n\r\n\r\n\r\n \r\n\r\nclass NetForestCoverChange extends Component {\r\n\r\n    state = {\r\n        select: {\r\n            GraficaType:'group',\r\n            Iteration:'iteration_4',\r\n            Scenario:'Sustainaible'\r\n        }\r\n    }\r\n    \r\n    \r\n     \r\n\r\n\r\n    //recive valor de class component \"ComboBox\" \r\n    handleChange = e => {\r\n        this.setState({\r\n            select: {\r\n                //el next code evitara que se sobrescriba cuando reciva un valor new\r\n                ...this.state.select,\r\n                [e.target.name]: e.target.value\r\n            }\r\n        })\r\n    }\r\n   \r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Nfch\">\r\n                 {/* componente de comboBox(opciones para el tipo de grafica)*/} \r\n                 <div className=\"Combo-Box\">\r\n                <ComboBox onChange={this.handleChange}/>\r\n                </div>\r\n                \r\n             <div className=\"choose-grafica\">\r\n             <ChooseGrafica data={this.state}\r\n                             grafica={BarChart}\r\n             />\r\n                </div>\r\n                \r\n               \r\n\r\n           \r\n\r\n\r\n           \r\n\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default NetForestCoverChange;   \r\n\r\n","import React from 'react';\nimport './css/App.css';\nimport Nfc from './pages/NetForestCoverChange';\nfunction App() {\n  return (\n    <div className=\"App\">\n          \n    <Nfc/>\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}